// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: lib/ext/solid/pod/profile/web_id_profile.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'package:solid_task/ext/solid/pod/profile/web_id_profile.dart' as wip;
import 'package:rdf_vocabularies_core/foaf.dart';
import 'package:rdf_vocabularies_core/solid.dart';

/// Generated mapper for [wip.WebIdProfile] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `wip.WebIdProfile`.
class WebIdProfileMapper implements GlobalResourceMapper<wip.WebIdProfile> {
  final IriTermMapper<String> _issuersMapper;
  final IriTermMapper<String> _storageMapper;

  /// Constructor
  const WebIdProfileMapper(
      {IriTermMapper<String> issuersMapper = const IriFullMapper(),
      IriTermMapper<String> storageMapper = const IriFullMapper()})
      : _issuersMapper = issuersMapper,
        _storageMapper = storageMapper;

  @override
  IriTerm? get typeIri => FoafPerson.classIri;

  @override
  wip.WebIdProfile fromRdfResource(
      IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final iri = subject.iri;
    final Iterable<String> issuers =
        reader.requireCollection<Iterable<String>, String>(
            Solid.oidcIssuer, UnorderedItemsMapper.new,
            itemDeserializer: _issuersMapper);
    final Iterable<String> storage = reader.requireCollection<Iterable<String>,
            String>(
        const IriTerm.prevalidated('http://www.w3.org/ns/pim/space#storage'),
        UnorderedItemsMapper.new,
        itemDeserializer: _storageMapper);
    final String? name = reader.optional(FoafPerson.name);

    // Get unmapped triples as the last reader operation for lossless mapping
    final RdfGraph other = reader.getUnmapped<RdfGraph>();

    return wip.WebIdProfile(
        iri: iri, issuers: issuers, storage: storage, other: other, name: name);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    wip.WebIdProfile resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(resource.iri);

    return context
        .resourceBuilder(subject)
        .addCollection<Iterable<String>, String>(
            Solid.oidcIssuer, resource.issuers, UnorderedItemsMapper.new,
            itemSerializer: _issuersMapper)
        .addCollection<Iterable<String>, String>(
            const IriTerm.prevalidated(
                'http://www.w3.org/ns/pim/space#storage'),
            resource.storage,
            UnorderedItemsMapper.new,
            itemSerializer: _storageMapper)
        .when(resource.name != null,
            (b) => b.addValue(FoafPerson.name, resource.name))
        .addUnmapped(resource.other)
        .build();
  }
}
