// Mocks generated by Mockito 5.4.5 from annotations
// in solid_task/test/ext/solid/sync/sync_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:solid_task/ext/solid/sync/sync_service.dart' as _i2;
import 'package:solid_task/services/logger_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSyncResult_0 extends _i1.SmartFake implements _i2.SyncResult {
  _FakeSyncResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncService extends _i1.Mock implements _i2.SyncService {
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<_i2.SyncResult> syncToRemote() => (super.noSuchMethod(
        Invocation.method(
          #syncToRemote,
          [],
        ),
        returnValue: _i3.Future<_i2.SyncResult>.value(_FakeSyncResult_0(
          this,
          Invocation.method(
            #syncToRemote,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.SyncResult>.value(_FakeSyncResult_0(
          this,
          Invocation.method(
            #syncToRemote,
            [],
          ),
        )),
      ) as _i3.Future<_i2.SyncResult>);

  @override
  _i3.Future<_i2.SyncResult> syncFromRemote() => (super.noSuchMethod(
        Invocation.method(
          #syncFromRemote,
          [],
        ),
        returnValue: _i3.Future<_i2.SyncResult>.value(_FakeSyncResult_0(
          this,
          Invocation.method(
            #syncFromRemote,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.SyncResult>.value(_FakeSyncResult_0(
          this,
          Invocation.method(
            #syncFromRemote,
            [],
          ),
        )),
      ) as _i3.Future<_i2.SyncResult>);

  @override
  _i3.Future<_i2.SyncResult> fullSync() => (super.noSuchMethod(
        Invocation.method(
          #fullSync,
          [],
        ),
        returnValue: _i3.Future<_i2.SyncResult>.value(_FakeSyncResult_0(
          this,
          Invocation.method(
            #fullSync,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.SyncResult>.value(_FakeSyncResult_0(
          this,
          Invocation.method(
            #fullSync,
            [],
          ),
        )),
      ) as _i3.Future<_i2.SyncResult>);

  @override
  void startPeriodicSync(Duration? interval) => super.noSuchMethod(
        Invocation.method(
          #startPeriodicSync,
          [interval],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopPeriodicSync() => super.noSuchMethod(
        Invocation.method(
          #stopPeriodicSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ContextLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockContextLogger extends _i1.Mock implements _i4.ContextLogger {
  @override
  void debug(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
