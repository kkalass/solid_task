// Mocks generated by Mockito 5.4.5 from annotations
// in solid_task/test/services/repository/solid_item_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:solid_task/models/item.dart' as _i4;
import 'package:solid_task/models/item_operation.dart' as _i7;
import 'package:solid_task/services/logger_service.dart' as _i2;
import 'package:solid_task/services/repository/operation_repository.dart'
    as _i6;
import 'package:solid_task/services/storage/local_storage_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeContextLogger_0 extends _i1.SmartFake implements _i2.ContextLogger {
  _FakeContextLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageService extends _i1.Mock
    implements _i3.LocalStorageService {
  @override
  List<_i4.Item> getAllItems() => (super.noSuchMethod(
        Invocation.method(
          #getAllItems,
          [],
        ),
        returnValue: <_i4.Item>[],
        returnValueForMissingStub: <_i4.Item>[],
      ) as List<_i4.Item>);

  @override
  _i4.Item? getItem(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i4.Item?);

  @override
  _i5.Future<void> saveItem(_i4.Item? item) => (super.noSuchMethod(
        Invocation.method(
          #saveItem,
          [item],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteItem(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<List<_i4.Item>> watchItems() => (super.noSuchMethod(
        Invocation.method(
          #watchItems,
          [],
        ),
        returnValue: _i5.Stream<List<_i4.Item>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i4.Item>>.empty(),
      ) as _i5.Stream<List<_i4.Item>>);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i2.LoggerService {
  @override
  _i2.ContextLogger createLogger(String? context) => (super.noSuchMethod(
        Invocation.method(
          #createLogger,
          [context],
        ),
        returnValue: _FakeContextLogger_0(
          this,
          Invocation.method(
            #createLogger,
            [context],
          ),
        ),
        returnValueForMissingStub: _FakeContextLogger_0(
          this,
          Invocation.method(
            #createLogger,
            [context],
          ),
        ),
      ) as _i2.ContextLogger);

  @override
  void configure({
    int? maxLogSize,
    int? maxLogFiles,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #configure,
          [],
          {
            #maxLogSize: maxLogSize,
            #maxLogFiles: maxLogFiles,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void debug(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<String?> getLogContents() => (super.noSuchMethod(
        Invocation.method(
          #getLogContents,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
        returnValueForMissingStub: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<List<String>> getAllLogContents() => (super.noSuchMethod(
        Invocation.method(
          #getAllLogContents,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [ContextLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockContextLogger extends _i1.Mock implements _i2.ContextLogger {
  @override
  void debug(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [OperationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOperationRepository extends _i1.Mock
    implements _i6.OperationRepository {
  @override
  _i5.Stream<List<_i7.ItemOperation>> watchOperations() => (super.noSuchMethod(
        Invocation.method(
          #watchOperations,
          [],
        ),
        returnValue: _i5.Stream<List<_i7.ItemOperation>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i7.ItemOperation>>.empty(),
      ) as _i5.Stream<List<_i7.ItemOperation>>);

  @override
  List<_i7.ItemOperation> getAllOperations() => (super.noSuchMethod(
        Invocation.method(
          #getAllOperations,
          [],
        ),
        returnValue: <_i7.ItemOperation>[],
        returnValueForMissingStub: <_i7.ItemOperation>[],
      ) as List<_i7.ItemOperation>);

  @override
  List<_i7.ItemOperation> getOperationsForItem(String? itemId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOperationsForItem,
          [itemId],
        ),
        returnValue: <_i7.ItemOperation>[],
        returnValueForMissingStub: <_i7.ItemOperation>[],
      ) as List<_i7.ItemOperation>);

  @override
  List<_i7.ItemOperation> getUnsyncedOperationsForItem(String? itemId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnsyncedOperationsForItem,
          [itemId],
        ),
        returnValue: <_i7.ItemOperation>[],
        returnValueForMissingStub: <_i7.ItemOperation>[],
      ) as List<_i7.ItemOperation>);

  @override
  List<_i7.ItemOperation> getAllUnsyncedOperations() => (super.noSuchMethod(
        Invocation.method(
          #getAllUnsyncedOperations,
          [],
        ),
        returnValue: <_i7.ItemOperation>[],
        returnValueForMissingStub: <_i7.ItemOperation>[],
      ) as List<_i7.ItemOperation>);

  @override
  _i5.Future<void> saveOperation(_i7.ItemOperation? operation) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveOperation,
          [operation],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> saveOperations(List<_i7.ItemOperation>? operations) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveOperations,
          [operations],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> markAsSynced(List<_i7.ItemOperation>? operations) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsSynced,
          [operations],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteOperation(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteOperation,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> cleanupOperationsForDeletedItems(
          List<String>? activeItemIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #cleanupOperationsForDeletedItems,
          [activeItemIds],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
